// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/handler.go

// Package handler is a generated GoMock package.
package handler

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDeliveryBoyRepository is a mock of DeliveryBoyRepository interface
type MockDeliveryBoyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryBoyRepositoryMockRecorder
}

// MockDeliveryBoyRepositoryMockRecorder is the mock recorder for MockDeliveryBoyRepository
type MockDeliveryBoyRepositoryMockRecorder struct {
	mock *MockDeliveryBoyRepository
}

// NewMockDeliveryBoyRepository creates a new mock instance
func NewMockDeliveryBoyRepository(ctrl *gomock.Controller) *MockDeliveryBoyRepository {
	mock := &MockDeliveryBoyRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryBoyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeliveryBoyRepository) EXPECT() *MockDeliveryBoyRepositoryMockRecorder {
	return m.recorder
}

// GetNearBy mocks base method
func (m *MockDeliveryBoyRepository) GetNearBy(shopID, distance int) ([]*DeliveryBoy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearBy", shopID, distance)
	ret0, _ := ret[0].([]*DeliveryBoy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearBy indicates an expected call of GetNearBy
func (mr *MockDeliveryBoyRepositoryMockRecorder) GetNearBy(shopID, distance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearBy", reflect.TypeOf((*MockDeliveryBoyRepository)(nil).GetNearBy), shopID, distance)
}

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyDeliveryBoy mocks base method
func (m *MockNotifier) NotifyDeliveryBoy(boyID, orderID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyDeliveryBoy", boyID, orderID)
}

// NotifyDeliveryBoy indicates an expected call of NotifyDeliveryBoy
func (mr *MockNotifierMockRecorder) NotifyDeliveryBoy(boyID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyDeliveryBoy", reflect.TypeOf((*MockNotifier)(nil).NotifyDeliveryBoy), boyID, orderID)
}
